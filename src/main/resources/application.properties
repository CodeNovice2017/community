# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties
# 上面是Spring Boot的常用配置的含义
# 这些配置都是相当于给一个个配置类注入数据,比如spring.thymeleaf.cache=false就是在给ThymeleafAutoConfiguration在注入数据
# tomcat的端口号
server.port=8080
# 项目本身的路径
server.servlet.context-path=/community
# 关闭Thymeleaf关闭,因为开发的时候需要经常改页面,那么如果有缓存就会导致有可能页面的更新会有延迟,上线后应该开启,可以降低服务器的压力
spring.thymeleaf.cache=false

# MySQL和Mybatis
# DataSourceProperties(配置的是mysql数据库和连接池,连接池也叫数据元,是可以统一管理连接的工厂,能够统一的初始化一批连接,可供反复使用,还能够管理连接的上限,避免数据库因为过多的人次访问瘫痪)
# 前面四条是mysql配置,后面四条是连接池的配置
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=chenxinshuai5656
# 这个是Spring Boot中性能最好的连接池
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# 最大连接数
spring.datasource.hikari.maximum-pool-size=15
# 最小空闲连接 连接都被回收了之后 最少保留5个
spring.datasource.hikari.minimum-idle=5
# 超时时间,就是连接空闲了就立刻关闭,要等30000ms才关闭
spring.datasource.hikari.idle-timeout=30000

# MybatisProperties
# 映射文件的存放位置,为什么是classpath下,因为项目编译后,target/classes就是classpath类路径,而static和template等都在这个路径下
mybatis.mapper-locations=classpath:mapper/*.xml
# 这个是用实体类去封装好表里的数据,这个是指定实体类所在的包名,未来就会在entity下创建实体类用于封装表的数据
# 配置之后,在配置文件里引用实体类的时候就不用写包名了
mybatis.type-aliases-package=com.nowcoder.community.entity
# 启动自动生成组件 insert id自增长的支持
mybatis.configuration.useGeneratedKeys=true
# 表的字段是不区分大小写的,我们建立的实体类的属性和表的字段对应,但是我们一般实体类采用驼峰式命名,而表的字段是全小写,这个选项让实体类和表的字段可以匹配起来
mybatis.configuration.mapUnderscoreToCamelCase=true

# logger
# 偷懒,将项目代码的日志级别都设置为debug,那么自然dao的日志级别也都是dao了
#logging.level.com.nowcoder.community=debug
#logging.file=C:/workspace/Coder/Java_Codes/communityProjectData/logs/community.log

# MailProperties
spring.mail.host=smtp.163.com
spring.mail.port=465
spring.mail.username=codecx@163.com
spring.mail.password=KCRMQYCKVRVWLHMD

# 使用smtps,相较smtp更加安全
spring.mail.protocol=smtps
spring.mail.default-encoding=UTF-8
spring.mail.properties.mail.smtp.ssl.enable=true

# 域名配置(这个key都是我们自己取名的)方便以后上线的配置
community.path.domain=http://localhost:8080

# 上传资源的存放位置
# *未来上线linux要修改的
community.path.upload=C:/workspace/Coder/Java_Codes/communityProjectData/upload

# redis配置
# 面向的类是RedisProperties,可以ctrl n搜索RedisAutoConfiguration然后进去看到SpringBoot的默认配置

# 三个一定要配置的,其他都有默认值
# redis16个库选哪一个
spring.redis.database=11
# 要访问的库的ip是多少
spring.redis.host=localhost
# 端口
spring.redis.port=6379

# KafkaProperties
spring.kafka.bootstrap-servers=localhost:9092
# 消费者分组id
# kafka安装路径下的consumer.properties里面有这个值,如果修改了里面的值,要重启服务
spring.kafka.consumer.group-id=community-consumer-group
# 这个参数的意思是,是否自动提交消费者的偏移量(offset),之前命令行测试消费者读取消息时是按照偏移量来读取,这个参数就是这个偏移量要不要记录下来做提交
spring.kafka.consumer.enable-auto-commit=true
# 自动提交的频率,3000ms=3s
spring.kafka.consumer.auto-commit-interval=3000